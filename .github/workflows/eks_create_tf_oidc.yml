# This is a basic workflow to help you get started with Actions

name: OIDC Create EKS via TF

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ ucs-template ]
  # pull_request:
  #   branches: [ ucs-template ]

  # Nightly Deployments
#  schedule:
#    - cron: '0 2 * * *' # run at 2 AM UTC

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ main ]
    inputs:
      deploymentTarget:
        description: 'Deployment Target'
        required: true 
        type: choice
        default: 'mcp'
        options: 
        - mcp
      deploymentStage:
        description: 'Deployment Stage'
        required: true 
        type: choice
        default: 'DEV'
        options: 
        - DEV
        - TEST
      sourceRepository:
        description: 'Repository Source'
        required: true 
        type: string
        default: 'unity-sds/unity-cs-sps-demo'
      sourceBranch:
        description: 'Repository Branch'
        required: true 
        type: string
        default: 'smolenski_tf_test_mcp'


permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deployment"
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Configure default variables
        env:
          DEFAULT_TARGET: 'mcp'
          DEFAULT_REPO: 'unity-sds/unity-cs-sps-demo'
          DEFAULT_COMMIT: 'smolenski_tf_test_mcp'
          DEFAULT_STAGE: 'DEV'
        run: |
          echo "TARGET_ENV=${{ github.event.inputs.deploymentTarget || env.DEFAULT_TARGET }}" >> $GITHUB_ENV
          echo "TARGET_STAGE=${{ github.event.inputs.deploymentStage || env.DEFAULT_STAGE }}" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.event.inputs.sourceRepository || env.DEFAULT_REPO }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.event.inputs.sourceBranch || env.DEFAULT_COMMIT }}" >> $GITHUB_ENV


      - name: Display deployment configuration
        run :
          echo "Target ENV ${{ env.TARGET_ENV }}"
          echo "Target STAGE ${{ env.TARGET_STAGE }}"
          echo "Repo Name ${{ env.REPO_NAME }}"
          echo "Commit Hash ${{ env.COMMIT_HASH }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets[format('OIDC_{0}_ROLE', env.TARGET_STAGE)] }}
#          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Caller Identity
        run: aws sts get-caller-identity


      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: SCM CHeckout
        uses: actions/checkout@v2

      # Create tfvars file for environment-specific values
      - name: Create TFVARS file
        run: |
          ls -al
          rm -f terraform-unity-eks_module/cicd.tfvars
          cp -f terraform-unity/TFVARS/${{ env.TARGET_STAGE }}/${{ env.TARGET_ENV }}.tfvars terraform-unity-eks_module/cicd.tfvars
          cat resources/deployable/terraform-unity/cicd.tfvars

      # Runs a single command using the runners shell
      - name: Display state of working directory root
        run: ls -al terraform-unity-eks_module

#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          # terraform_version: 0.13.0
#          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      ## Check Terraform formatting
      - name: Terraform Format
        working-directory: ./terraform-unity-eks_module
        id: fmt
        run: terraform fmt -check

      ## Init terraform
      - name: Terraform Init
        working-directory: ./terraform-unity-eks_module
        id: init
        run: terraform init

      ## Validate Terraform
      - name: Terraform Validate
        working-directory: ./terraform-unity-eks_module
        id: validate
        run: terraform validate -no-color

      ## Plan Terraform
      - name: Terraform Plan
        working-directory: ./terraform-unity-eks_module
        id: plan
        run: terraform plan -no-color -var-file="cicd.tfvars"
        continue-on-error: true

      ## Fail the job if terraform plan doesn't succeed
      - name: Terraform Plan Status
        working-directory: ./terraform-unity-eks_module
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./terraform-unity-eks_module
#        if: github.ref == 'refs/heads/smolenski_tf_test' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file="cicd.tfvars"


