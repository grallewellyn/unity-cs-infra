# This is a basic workflow to help you get started with Actions

name: CI Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ ucs-template ]
  pull_request:
    branches: [ ucs-template ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ ucs-template ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deployment"
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: ls -al

      # Checks-out the repo to deploy
      # While cloning the repository:
      #   - it clones the repo into the given `path`
      #   - it checks out the branch defined at `ref`
      - name: Clone the service repository for deployment
        uses: actions/checkout@v2
        with:
          repository: unity-sds/unity-cs-sps-demo
          path: resources/deployable
          ref: smolenski_tf_test

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: ls -al resources/deployable

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Format
        working-directory: ./resources/deployable/terraform-unity
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: ./resources/deployable/terraform-unity
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: ./resources/deployable/terraform-unity
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./resources/deployable/terraform-unity
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        working-directory: ./resources/deployable/terraform-unity
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./resources/deployable/terraform-unity
#        if: github.ref == 'refs/heads/smolenski_tf_test' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Post-Deployment Smoke Test
        working-directory: ./resources/deployable/smoketest
        uses: actions/setup-python@v2
        with: 
          python-version: '3.x'
          architecture: 'x64'
      - run: ls -al
      - run: pip install -r requirements.txt
      - run: python3 smokekube.py


      # Runs a set of commands using the runners shell
#      - name: Only run this if the test running script exists
#        run: '(test -f build/tests/run.sh && sh build/tests/run.sh && cat build/tests/report.xml) || echo No test script, skipping step'

      # Run terraform scripts
#      - name: Run terraform scripts in a docker container
#        run: docker run --rm --privileged aptman/qus -s -- -p

#      - name: build
#        uses: docker://hashicorp/terraform:latest
#        with:
#          args: make