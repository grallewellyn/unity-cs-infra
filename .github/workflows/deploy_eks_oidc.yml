# This is a basic workflow to help you get started with Actions

name: MCP Dev - EKS Deployment via OIDC
env:
  EKSClusterRegion: us-west-2
  EKSClusterVersion: 1.21
  EKSClusterAMI: ami-01fe93a8bc6cb9bef
#  EKSClusterAMI: ami-06b4f03f7dd146e31
  EKSKubeProxyVersion: v1.21.2-eksbuild.2
  EKSCoreDNSVersion: v1.8.4-eksbuild.1
  EKSSubnetConfigA: "us-west-2a: { id: subnet-092597c48cfec3f04 }"
  EKSSubnetConfigB: "us-west-2b: { id: subnet-0ebdd997cc3ebe58d }"
#  EKSSubnetConfigA: "us-west-2a: { id: subnet-00db2965967acb6b1 }"
#  EKSSubnetConfigB: "us-west-2b: { id: subnet-092597c48cfec3f04 }"
  EKSSecurityGroup: "sg-09bd8de0af1c3c99a"
  EKSSharedNodeSecurityGroup: "sg-09bd8de0af1c3c99a"
  EKSServiceArn: ${{ secrets.EKSSERVICEARN }}
  EKSInstanceRoleArn: ${{ secrets.EKSINSTANCEROLEARN }}
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ ucs-template ]
  # pull_request:
  #   branches: [ ucs-template ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ main ]
    inputs:
      OWNER:
        description: 'Service Owner'
        required: true
        type: string
        default: 'U-CS'
      CLUSTERNAME:
        description: 'EKS Cluster Name'
        required: true
        type: string
      MINNODES:
        description: 'Minimum Cluster Nodes'
        required: true
        type: string
        default: '1'
      MAXNODES:
        description: 'Max Cluster Nodes'
        required: true
        type: string
        default: '3'
      DESIREDNODES:
        description: 'Desired Cluster Nodes'
        required: true
        type: string
        default: '1'
      INSTANCETYPE:
        description: 'EC2 Instance Type'
        type: string
        required: true
        default: 'm5.xlarge'


permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deployment"
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Configure AWS Credentials through OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # # Use the OIDC Client package
      # - name: Install OIDC Client from Core Package
      #   run: npm install @actions/core@1.6.0 @actions/http-client

      # # Generate a token to use with eksctl
      # - name: Get Id Token
      #   uses: actions/github-script@v6
      #   id: idtoken
      #   with:
      #     script: |
      #       const coredemo = require('@actions/core')
      #       let id_token = await coredemo.getIDToken()   
      #       coredemo.setOutput('id_token', id_token)  
#      - name: Request JWT using environment variables
#        uses: actions/github-script@v6
#        id: script
#        timeout-minutes: 10
#        with:
#          debug: true
#          script: |
#            const token = process.env['ACTIONS_RUNTIME_TOKEN']
#            const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
#            core.setOutput('TOKEN', token.trim())
#            core.setOutput('IDTOKENURL', runtimeUrl.trim())
#
#      - name: Request Token via Curl
#        run: |
#          IDTOKEN=$(curl -H "Authorization: bearer $" $ -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
#          echo $IDTOKEN
#          jwtd() {
#              if [[ -x $(command -v jq) ]]; then
#                  jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
#                  echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
#              fi
#          }
#          jwtd $IDTOKEN
#          echo "::set-output name=idToken::${IDTOKEN}"
#        id: tokenid


      - name: Get AWS Caller Identity
        run: aws sts get-caller-identity

      # Set up current working directory with the repo contents
      - name: SCM CHeckout
        uses: actions/checkout@v2

      # Determine contents of working directory
      - name: Display contents of working directory
        run: ls -al

      # Install eksctl to launch EKS
      - name: Install eksctl
        run: |
         curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && \
         sudo mv /tmp/eksctl /usr/local/bin && \
         eksctl version

      - name: Install Unity Transformer
        run: |
          curl --silent --location https://github.com/unity-sds/unity-cs-manager/releases/download/0.1.13-Alpha/unity-cs-manager-0.1.13-Alpha-linux-amd64.tar.gz | tar xz -C /tmp
          sudo mv /tmp/unity-cs-manager /usr/local/bin

      # Render template
      - name: Render Template
        run: |
          unity-cs-manager eks --clustername ${{ INPUTS.CLUSTERNAME }} --owner ${{ INPUTS.OWNER }} --managenodegroups dafaultgroup,${{ INPUTS.MINNODES }},${{ INPUTS.MAXNODES }},${{ INPUTS.DESIREDNODES }},m5.xlarge --instancetype ${{ INPUTS.INSTANCETYPE }} --projectname ${{ INPUTS.CLUSTERNAME }} --servicename ${{ INPUTS.OWNER }} > build/eksctl/eksctl-config.yaml
          cat build/eksctl/eksctl-config.yaml
      # Launch EKS
      - name: Launch EKS cluster
        run: | 
          eksctl create cluster -f build/eksctl/eksctl-config.yaml
          #aws ssm put-parameter --name /${{ inputs.CLUSTERNAME }}/eks --value ${{ inputs.CLUSTERNAME }} --tags=Key=project,Value=u-cs --type String
