# This is a basic workflow to help you get started with Actions

name: CI Deployment Destroy OIDC

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ ucs-template ]
  # pull_request:
  #   branches: [ ucs-template ]

  # Nightly Deployments
  schedule:
    - cron: '0 4 * * *' # run at 2 AM UTC

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ main ]
    inputs:
      deploymentProject:
        description: 'Deployment Project'
        required: true 
        type: choice
        default: 'UNITY'
        options: 
        - UNITY
        - SIPS
      deploymentStage:
        description: 'Deployment Stage'
        required: true 
        type: choice
        default: 'DEV'
        options: 
        - DEV
        - TEST
        - OPS
      deploymentOwner:
        description: 'Deployment Owner'
        required: true 
        type: string
        default: 'nightly'
      deploymentTarget:
        description: 'Cloud Host'
        required: true 
        type: choice
        default: 'mcp'
        options: 
        - mcp
      sourceRepository:
        description: 'Repository Source'
        required: true 
        type: string
        default: 'unity-sds/unity-cs-sps-demo'
      sourceBranch:
        description: 'Repository Branch'
        required: true 
        type: string
        default: 'smolenski_tf_test_mcp'


permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deployment"
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Configure default variables
        env:
          DEFAULT_TARGET: 'mcp'
          DEFAULT_REPO: 'unity-sds/unity-cs-sps-demo'
          DEFAULT_COMMIT: 'smolenski_tf_test_mcp'
          DEFAULT_STAGE: 'DEV'
          DEFAULT_PROJECT: 'UNITY'
          DEFAULT_OWNER: 'nightly'
          DEFAULT_EKSCLUSTERNAME: 'testtommon6'
        run: |
          echo "TARGET_ENV=${{ github.event.inputs.deploymentTarget || env.DEFAULT_TARGET }}" >> $GITHUB_ENV
          echo "TARGET_STAGE=${{ github.event.inputs.deploymentStage || env.DEFAULT_STAGE }}" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.event.inputs.sourceRepository || env.DEFAULT_REPO }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.event.inputs.sourceBranch || env.DEFAULT_COMMIT }}" >> $GITHUB_ENV
          echo "TARGET_PROJECT=${{ github.event.inputs.deploymentProject || env.DEFAULT_PROJECT }}" >> $GITHUB_ENV
          echo "TARGET_OWNER=${{ github.event.inputs.deploymentOwner || env.DEFAULT_OWNER }}" >> $GITHUB_ENV
          echo "TARGET_CLUSTER=${{ github.event.inputs.eksClusterName || env.DEFAULT_EKSCLUSTERNAME }}" >> $GITHUB_ENV

      - name: Display deployment configuration
        run :
          echo "Target ENV ${{ env.TARGET_ENV }}"
          echo "Target STAGE ${{ env.TARGET_STAGE }}"
          echo "Target PROJECT ${{ env.TARGET_PROJECT }}"
          echo "Target OWNER ${{ env.TARGET_OWNER }}"
          echo "Target EKS Cluster ${{ env.TARGET_CLUSTER }}"
          echo "Repo Name ${{ env.REPO_NAME }}"
          echo "Commit Hash ${{ env.COMMIT_HASH }}"

      - name: Select the proper Terraform Workspace
        run :
          terraform workspace select ${{ env.TARGET_ENV }}_${{ env.TARGET_STAGE }}_${{ env.TARGET_PROJECT }}_${{ env.TARGET_OWNER }} || terraform workspace new ${{ env.TARGET_ENV }}_${{ env.TARGET_STAGE }}_${{ env.TARGET_PROJECT }}_${{ env.TARGET_OWNER }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets[format('OIDC_{0}_ROLE', env.TARGET_STAGE)] }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Caller Identity
        run: aws sts get-caller-identity

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: SCM CHeckout
        uses: actions/checkout@v2

      # Checks-out the repo to deploy
      # While cloning the repository:
      #   - it clones the repo into the given `path`
      #   - it checks out the branch defined at `ref`
      - name: Clone the service repository for deployment
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO_NAME }}
          path: resources/deployable
          ref: ${{ env.COMMIT_HASH }}

      # Copy the appropriate TF files, depending on the deployment target
#          cp -f terraform-unity/main.${{ github.event.inputs.deploymentTarget }}.tf resources/deployable/terraform-unity/main.tf
#          cp -f terraform-unity/variables.${{ github.event.inputs.deploymentTarget }}.tf resources/deployable/terraform-unity/variables-unity.tf
      - name: Apply target-specific Terraform Configs
        run: |
          cp -f terraform-unity/main.${{ env.TARGET_ENV }}.tf resources/deployable/terraform-unity/main.tf
          cp -f terraform-unity/variables.${{ env.TARGET_ENV }}.tf resources/deployable/terraform-unity/variables.tf
          rm -f resources/deployable/terraform-unity/gateway.tf

      # Apply special env-specific configs (mostly used for MCP limitations)
      - name: Apply target-specific configurations
         # Remove dynamic networking configurations if this is MCP
        if: ${{ env.TARGET_ENV == 'mcp' }}
        run: rm resources/deployable/terraform-unity/networking.tf

      # Create tfvars file for environment-specific values
      - name: Create TFVARS file
        run: |
          rm -f resources/deployable/terraform-unity/cicd.tfvars
          cp -f terraform-unity/TFVARS/${{ env.TARGET_STAGE }}/${{ env.TARGET_ENV }}.tfvars resources/deployable/terraform-unity/cicd.tfvars
          cat resources/deployable/terraform-unity/cicd.tfvars

      # Runs a single command using the runners shell
      - name: Display state of working directory root
        run: ls -al resources/deployable

#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          # terraform_version: 0.13.0
#          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      ## Verify that the Terraform directory exists in the remote repo
      - name: Check for Terraform Directory
        id: terraform_directory
        uses: andstor/file-existence-action@v1
        with:
          files: "./resources/deployable/terraform-unity"

      - name: Terraform Directory Exists
        if: steps.terraform_directory.outputs.files_exists != 'true'
        run: exit 1


      ## Check Terraform formatting
      - name: Terraform Format
        working-directory: ./resources/deployable/terraform-unity
        id: fmt
        run: terraform fmt -check

      ## Init terraform
      - name: Terraform Init
        working-directory: ./resources/deployable/terraform-unity
        id: init
        run: terraform init

      ## Validate Terraform
      - name: Terraform Validate
        working-directory: ./resources/deployable/terraform-unity
        id: validate
        run: terraform validate -no-color


      - name: Terraform Destroy
        working-directory: ./resources/deployable/terraform-unity
#        if: github.ref == 'refs/heads/smolenski_tf_test' && github.event_name == 'push'
        run: terraform destroy -auto-approve -var-file="cicd.tfvars"
