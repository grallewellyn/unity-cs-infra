name: Nightly Cloudformation Kickoff for Management Console

permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    branches: [ main ]

    inputs: 
      DEPLOYMENTSTAGE:
        description: 'Deployment Target'
        required: true 
        type: choice
        default: 'DEV'
        options: 
        - DEV
        - TEST
        - OPS
        - SIPS

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deployment:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Configure AWS Credentials through OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets[format('OIDC_{0}_ROLE', inputs.DEPLOYMENTSTAGE)] }}
#          role-to-assume: ${{ secrets.OIDC_DEV_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Retrieve SSM parameters
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
            parameterPairs: "/unity-sds/u-cs/nightly/vpcid = VPCID,
                /unity-sds/u-cs/nightly/keypairname = KEYPAIRNAME,
                /unity-sds/u-cs/nightly/publicsubnetid = PUBLICSUBNETID,
                /unity-sds/u-cs/nightly/githubtoken = GITHUBTOKEN,
                /unity-sds/u-cs/nightly/privilegedpolicyname = PRIVILEGEDPOLICYNAME,
                /unity-sds/u-cs/nightly/lambdaexecutionrole = LAMBDAEXECUTIONROLE"
            # The part before equals is the ssm parameterName, and after is the ENV Variable name for the workflow.
            # No limit on number of parameters. You can put new lines and spaces in as desired, they get trimmed out.
            withDecryption: "true" # defaults to true


      # Checkout the cloudformation repo 
      - name: Checkout deployable cloudformation code
        uses: actions/checkout@v3
        with:
          repository: unity-sds/unity-on-demand-cloudformation
          path: deployable
          ref: ubuntu-port-smolensk

      # Ensure files are where we expect
      - name: Debug 1
        run: ls -al; ls -al deployable; ls -al deployable/templates/ubuntu/

      # Removed ,LambdaExecutionRole=${{ env.LAMBDAEXECUTIONROLE }}
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: U-CS-Nightly-Stack
          template: deployable/templates/ubuntu/unity_deployer_instance-management_console-github_action.yaml
          parameter-overrides: "VPCID=${{ env.VPCID }},PublicSubnetID=${{ env.PUBLICSUBNETID }},KeyPairName=${{ env.KEYPAIRNAME }},GithubToken=${{ env.GITHUBTOKEN }},PrivilegedPolicyName=${{ env.PRIVILEGEDPOLICYNAME }},LambdaExecutionRoleARN=${{ env.LAMBDAEXECUTIONROLE }}"